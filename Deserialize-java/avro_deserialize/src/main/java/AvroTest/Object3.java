/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package AvroTest;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Object3 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3485176267200364891L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Object3\",\"namespace\":\"AvroTest\",\"fields\":[{\"name\":\"floatVal\",\"type\":\"float\"},{\"name\":\"someInteger\",\"type\":\"int\",\"default\":-13},{\"name\":\"someLong\",\"type\":\"long\"},{\"name\":\"optionalInt\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float floatVal;
  @Deprecated public int someInteger;
  @Deprecated public long someLong;
  @Deprecated public java.lang.Integer optionalInt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Object3() {}

  /**
   * All-args constructor.
   * @param floatVal The new value for floatVal
   * @param someInteger The new value for someInteger
   * @param someLong The new value for someLong
   * @param optionalInt The new value for optionalInt
   */
  public Object3(java.lang.Float floatVal, java.lang.Integer someInteger, java.lang.Long someLong, java.lang.Integer optionalInt) {
    this.floatVal = floatVal;
    this.someInteger = someInteger;
    this.someLong = someLong;
    this.optionalInt = optionalInt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return floatVal;
    case 1: return someInteger;
    case 2: return someLong;
    case 3: return optionalInt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: floatVal = (java.lang.Float)value$; break;
    case 1: someInteger = (java.lang.Integer)value$; break;
    case 2: someLong = (java.lang.Long)value$; break;
    case 3: optionalInt = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'floatVal' field.
   * @return The value of the 'floatVal' field.
   */
  public java.lang.Float getFloatVal() {
    return floatVal;
  }

  /**
   * Sets the value of the 'floatVal' field.
   * @param value the value to set.
   */
  public void setFloatVal(java.lang.Float value) {
    this.floatVal = value;
  }

  /**
   * Gets the value of the 'someInteger' field.
   * @return The value of the 'someInteger' field.
   */
  public java.lang.Integer getSomeInteger() {
    return someInteger;
  }

  /**
   * Sets the value of the 'someInteger' field.
   * @param value the value to set.
   */
  public void setSomeInteger(java.lang.Integer value) {
    this.someInteger = value;
  }

  /**
   * Gets the value of the 'someLong' field.
   * @return The value of the 'someLong' field.
   */
  public java.lang.Long getSomeLong() {
    return someLong;
  }

  /**
   * Sets the value of the 'someLong' field.
   * @param value the value to set.
   */
  public void setSomeLong(java.lang.Long value) {
    this.someLong = value;
  }

  /**
   * Gets the value of the 'optionalInt' field.
   * @return The value of the 'optionalInt' field.
   */
  public java.lang.Integer getOptionalInt() {
    return optionalInt;
  }

  /**
   * Sets the value of the 'optionalInt' field.
   * @param value the value to set.
   */
  public void setOptionalInt(java.lang.Integer value) {
    this.optionalInt = value;
  }

  /**
   * Creates a new Object3 RecordBuilder.
   * @return A new Object3 RecordBuilder
   */
  public static AvroTest.Object3.Builder newBuilder() {
    return new AvroTest.Object3.Builder();
  }

  /**
   * Creates a new Object3 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Object3 RecordBuilder
   */
  public static AvroTest.Object3.Builder newBuilder(AvroTest.Object3.Builder other) {
    return new AvroTest.Object3.Builder(other);
  }

  /**
   * Creates a new Object3 RecordBuilder by copying an existing Object3 instance.
   * @param other The existing instance to copy.
   * @return A new Object3 RecordBuilder
   */
  public static AvroTest.Object3.Builder newBuilder(AvroTest.Object3 other) {
    return new AvroTest.Object3.Builder(other);
  }

  /**
   * RecordBuilder for Object3 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Object3>
    implements org.apache.avro.data.RecordBuilder<Object3> {

    private float floatVal;
    private int someInteger;
    private long someLong;
    private java.lang.Integer optionalInt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroTest.Object3.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.floatVal)) {
        this.floatVal = data().deepCopy(fields()[0].schema(), other.floatVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.someInteger)) {
        this.someInteger = data().deepCopy(fields()[1].schema(), other.someInteger);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.someLong)) {
        this.someLong = data().deepCopy(fields()[2].schema(), other.someLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.optionalInt)) {
        this.optionalInt = data().deepCopy(fields()[3].schema(), other.optionalInt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Object3 instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroTest.Object3 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.floatVal)) {
        this.floatVal = data().deepCopy(fields()[0].schema(), other.floatVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.someInteger)) {
        this.someInteger = data().deepCopy(fields()[1].schema(), other.someInteger);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.someLong)) {
        this.someLong = data().deepCopy(fields()[2].schema(), other.someLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.optionalInt)) {
        this.optionalInt = data().deepCopy(fields()[3].schema(), other.optionalInt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'floatVal' field.
      * @return The value.
      */
    public java.lang.Float getFloatVal() {
      return floatVal;
    }

    /**
      * Sets the value of the 'floatVal' field.
      * @param value The value of 'floatVal'.
      * @return This builder.
      */
    public AvroTest.Object3.Builder setFloatVal(float value) {
      validate(fields()[0], value);
      this.floatVal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'floatVal' field has been set.
      * @return True if the 'floatVal' field has been set, false otherwise.
      */
    public boolean hasFloatVal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'floatVal' field.
      * @return This builder.
      */
    public AvroTest.Object3.Builder clearFloatVal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'someInteger' field.
      * @return The value.
      */
    public java.lang.Integer getSomeInteger() {
      return someInteger;
    }

    /**
      * Sets the value of the 'someInteger' field.
      * @param value The value of 'someInteger'.
      * @return This builder.
      */
    public AvroTest.Object3.Builder setSomeInteger(int value) {
      validate(fields()[1], value);
      this.someInteger = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'someInteger' field has been set.
      * @return True if the 'someInteger' field has been set, false otherwise.
      */
    public boolean hasSomeInteger() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'someInteger' field.
      * @return This builder.
      */
    public AvroTest.Object3.Builder clearSomeInteger() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'someLong' field.
      * @return The value.
      */
    public java.lang.Long getSomeLong() {
      return someLong;
    }

    /**
      * Sets the value of the 'someLong' field.
      * @param value The value of 'someLong'.
      * @return This builder.
      */
    public AvroTest.Object3.Builder setSomeLong(long value) {
      validate(fields()[2], value);
      this.someLong = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'someLong' field has been set.
      * @return True if the 'someLong' field has been set, false otherwise.
      */
    public boolean hasSomeLong() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'someLong' field.
      * @return This builder.
      */
    public AvroTest.Object3.Builder clearSomeLong() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'optionalInt' field.
      * @return The value.
      */
    public java.lang.Integer getOptionalInt() {
      return optionalInt;
    }

    /**
      * Sets the value of the 'optionalInt' field.
      * @param value The value of 'optionalInt'.
      * @return This builder.
      */
    public AvroTest.Object3.Builder setOptionalInt(java.lang.Integer value) {
      validate(fields()[3], value);
      this.optionalInt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'optionalInt' field has been set.
      * @return True if the 'optionalInt' field has been set, false otherwise.
      */
    public boolean hasOptionalInt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'optionalInt' field.
      * @return This builder.
      */
    public AvroTest.Object3.Builder clearOptionalInt() {
      optionalInt = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Object3 build() {
      try {
        Object3 record = new Object3();
        record.floatVal = fieldSetFlags()[0] ? this.floatVal : (java.lang.Float) defaultValue(fields()[0]);
        record.someInteger = fieldSetFlags()[1] ? this.someInteger : (java.lang.Integer) defaultValue(fields()[1]);
        record.someLong = fieldSetFlags()[2] ? this.someLong : (java.lang.Long) defaultValue(fields()[2]);
        record.optionalInt = fieldSetFlags()[3] ? this.optionalInt : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
