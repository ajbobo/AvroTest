/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package AvroTest;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Object1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3306307251940757511L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Object1\",\"namespace\":\"AvroTest\",\"fields\":[{\"name\":\"intVal_1\",\"type\":\"int\"},{\"name\":\"floatVal\",\"type\":\"float\"},{\"name\":\"intVal_2\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Object1> ENCODER =
      new BinaryMessageEncoder<Object1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Object1> DECODER =
      new BinaryMessageDecoder<Object1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Object1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Object1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Object1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Object1>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Object1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Object1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Object1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Object1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int intVal_1;
  private float floatVal;
  private int intVal_2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Object1() {}

  /**
   * All-args constructor.
   * @param intVal_1 The new value for intVal_1
   * @param floatVal The new value for floatVal
   * @param intVal_2 The new value for intVal_2
   */
  public Object1(java.lang.Integer intVal_1, java.lang.Float floatVal, java.lang.Integer intVal_2) {
    this.intVal_1 = intVal_1;
    this.floatVal = floatVal;
    this.intVal_2 = intVal_2;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return intVal_1;
    case 1: return floatVal;
    case 2: return intVal_2;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: intVal_1 = (java.lang.Integer)value$; break;
    case 1: floatVal = (java.lang.Float)value$; break;
    case 2: intVal_2 = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'intVal_1' field.
   * @return The value of the 'intVal_1' field.
   */
  public int getIntVal1() {
    return intVal_1;
  }


  /**
   * Sets the value of the 'intVal_1' field.
   * @param value the value to set.
   */
  public void setIntVal1(int value) {
    this.intVal_1 = value;
  }

  /**
   * Gets the value of the 'floatVal' field.
   * @return The value of the 'floatVal' field.
   */
  public float getFloatVal() {
    return floatVal;
  }


  /**
   * Sets the value of the 'floatVal' field.
   * @param value the value to set.
   */
  public void setFloatVal(float value) {
    this.floatVal = value;
  }

  /**
   * Gets the value of the 'intVal_2' field.
   * @return The value of the 'intVal_2' field.
   */
  public int getIntVal2() {
    return intVal_2;
  }


  /**
   * Sets the value of the 'intVal_2' field.
   * @param value the value to set.
   */
  public void setIntVal2(int value) {
    this.intVal_2 = value;
  }

  /**
   * Creates a new Object1 RecordBuilder.
   * @return A new Object1 RecordBuilder
   */
  public static AvroTest.Object1.Builder newBuilder() {
    return new AvroTest.Object1.Builder();
  }

  /**
   * Creates a new Object1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Object1 RecordBuilder
   */
  public static AvroTest.Object1.Builder newBuilder(AvroTest.Object1.Builder other) {
    if (other == null) {
      return new AvroTest.Object1.Builder();
    } else {
      return new AvroTest.Object1.Builder(other);
    }
  }

  /**
   * Creates a new Object1 RecordBuilder by copying an existing Object1 instance.
   * @param other The existing instance to copy.
   * @return A new Object1 RecordBuilder
   */
  public static AvroTest.Object1.Builder newBuilder(AvroTest.Object1 other) {
    if (other == null) {
      return new AvroTest.Object1.Builder();
    } else {
      return new AvroTest.Object1.Builder(other);
    }
  }

  /**
   * RecordBuilder for Object1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Object1>
    implements org.apache.avro.data.RecordBuilder<Object1> {

    private int intVal_1;
    private float floatVal;
    private int intVal_2;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroTest.Object1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.intVal_1)) {
        this.intVal_1 = data().deepCopy(fields()[0].schema(), other.intVal_1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.floatVal)) {
        this.floatVal = data().deepCopy(fields()[1].schema(), other.floatVal);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.intVal_2)) {
        this.intVal_2 = data().deepCopy(fields()[2].schema(), other.intVal_2);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Object1 instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroTest.Object1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.intVal_1)) {
        this.intVal_1 = data().deepCopy(fields()[0].schema(), other.intVal_1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.floatVal)) {
        this.floatVal = data().deepCopy(fields()[1].schema(), other.floatVal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intVal_2)) {
        this.intVal_2 = data().deepCopy(fields()[2].schema(), other.intVal_2);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'intVal_1' field.
      * @return The value.
      */
    public int getIntVal1() {
      return intVal_1;
    }


    /**
      * Sets the value of the 'intVal_1' field.
      * @param value The value of 'intVal_1'.
      * @return This builder.
      */
    public AvroTest.Object1.Builder setIntVal1(int value) {
      validate(fields()[0], value);
      this.intVal_1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'intVal_1' field has been set.
      * @return True if the 'intVal_1' field has been set, false otherwise.
      */
    public boolean hasIntVal1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'intVal_1' field.
      * @return This builder.
      */
    public AvroTest.Object1.Builder clearIntVal1() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'floatVal' field.
      * @return The value.
      */
    public float getFloatVal() {
      return floatVal;
    }


    /**
      * Sets the value of the 'floatVal' field.
      * @param value The value of 'floatVal'.
      * @return This builder.
      */
    public AvroTest.Object1.Builder setFloatVal(float value) {
      validate(fields()[1], value);
      this.floatVal = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'floatVal' field has been set.
      * @return True if the 'floatVal' field has been set, false otherwise.
      */
    public boolean hasFloatVal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'floatVal' field.
      * @return This builder.
      */
    public AvroTest.Object1.Builder clearFloatVal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'intVal_2' field.
      * @return The value.
      */
    public int getIntVal2() {
      return intVal_2;
    }


    /**
      * Sets the value of the 'intVal_2' field.
      * @param value The value of 'intVal_2'.
      * @return This builder.
      */
    public AvroTest.Object1.Builder setIntVal2(int value) {
      validate(fields()[2], value);
      this.intVal_2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'intVal_2' field has been set.
      * @return True if the 'intVal_2' field has been set, false otherwise.
      */
    public boolean hasIntVal2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'intVal_2' field.
      * @return This builder.
      */
    public AvroTest.Object1.Builder clearIntVal2() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Object1 build() {
      try {
        Object1 record = new Object1();
        record.intVal_1 = fieldSetFlags()[0] ? this.intVal_1 : (java.lang.Integer) defaultValue(fields()[0]);
        record.floatVal = fieldSetFlags()[1] ? this.floatVal : (java.lang.Float) defaultValue(fields()[1]);
        record.intVal_2 = fieldSetFlags()[2] ? this.intVal_2 : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Object1>
    WRITER$ = (org.apache.avro.io.DatumWriter<Object1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Object1>
    READER$ = (org.apache.avro.io.DatumReader<Object1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.intVal_1);

    out.writeFloat(this.floatVal);

    out.writeInt(this.intVal_2);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.intVal_1 = in.readInt();

      this.floatVal = in.readFloat();

      this.intVal_2 = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.intVal_1 = in.readInt();
          break;

        case 1:
          this.floatVal = in.readFloat();
          break;

        case 2:
          this.intVal_2 = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










